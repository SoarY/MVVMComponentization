plugins {
    id 'org.jetbrains.kotlin.android'
}

if (isBuildModule.toBoolean()) {
    //作为独立App应用运行
    apply plugin: 'com.android.application'
} else {
    //作为组件运行
    apply plugin: 'com.android.library'
}

apply plugin: 'kotlin-kapt'
apply from: "../config.gradle"

android {
    namespace 'com.soar.delicacy'
    compileSdk build_android.compileSdkVersion

    defaultConfig {
        //如果是独立模块，则使用当前组件的包名
        if (isBuildModule.toBoolean()) {
            applicationId "com.soar.delicacy"
        }

        minSdk build_android.minSdkVersion
        targetSdk build_android.targetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    kapt {
        arguments {
            arg("AROUTER_MODULE_NAME", project.getName())
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isBuildModule.toBoolean()) {
                //独立运行
                manifest.srcFile 'src/main/alone/AndroidManifest.xml'
            } else {
                //合并到宿主
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    //正式版本时，排除alone文件夹下所有调试文件
                    exclude 'src/main/alone/*'
                }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    viewBinding {
        enabled = true
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    //组件依赖基础库
    api project(':library-commonres')
    //组件依赖基础库
    api project(':library-common')
    //MVVM
    api project(':library-mvvm')
    //network
    api project(':library-network')

    //组件中依赖阿里路由编译框架
    kapt thirdLibs.arouter_compiler
    //glide
    api thirdLibs.glide
}